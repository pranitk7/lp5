#include<bits/stdc++.h>
using namespace std;

void merge(int *array, int l, int r, int m){

    int n1 = m-l+1;
    int n2 = r-m;

    int *L = new int[n1];
    int *R = new int[n2];

    for(int i=0; i<n1; i++){
        L[i] = array[l+i];
    }

    for(int j=0; j<n2; j++){
        R[j] = array[m+1+j];
    }

    int i = 0;
    int j = 0;
    int k = l;

    while(i<n1 && j<n2){

        if(L[i] <= R[j]){
            array[k] = L[i];
            i++;
        }else{
            array[k] = R[j];
            j++;
        }

        k++;
    }

    while(i<n1){
        array[k] = L[i];
        k++;
        i++;
    }

    while(j<n2){
        array[k] = R[j];
        j++;
        k++;
    }

    delete [] R;
    delete [] L;

}

void parallelMergeSort(int *array, int l, int r){

    if(l < r){
        int m = l+(r-l)/2;

        #pragma omp parallel sections
        {
            #pragma omp parallel section
            parallelMergeSort(array, l, m);

            #pragma omp parallel section
            parallelMergeSort(array, m+1, r);
        }

        merge(array, l, r, m);

        
    }

}


void MergeSort(int *array, int l, int r){

    if(l < r){
        int m = l+(r-l)/2;


            MergeSort(array, l, m);

            MergeSort(array, m+1, r);
        

        merge(array, l, r, m);

        
    }

}

int main(){

    int n;
    cout<<"Enter value of n "<<endl;
    cin>>n;
    int *array = new int[n];

    srand(time(0));

    for(int i=0; i<n; i++){
        array[i] = rand()%100;
    }

    clock_t start = clock();
    parallelMergeSort(array, 0, n-1);
    clock_t end = clock();
    double pt = end-start;

    start = clock();

    MergeSort(array, 0, n-1);

    end = clock();

    double st = end-start;
    
    cout<<"st "<<st<<endl;
    cout<<"pt "<<pt<<endl;

}