#include <bits/stdc++.h>
using namespace std;

const int N = 1e5 + 5;
vector<int> g[N];
bool visited[N];

void Bfs(int s)
{

    queue<int> q;
    q.push(s);
    visited[s] = true;

    while (!q.empty())
    {

        int u = q.front();
        q.pop();
        cout << u << " ";

        for (int i = 0; i < g[u].size(); i++)
        {

            int v = g[u][i];

            if (!visited[v])
            {
                visited[v] = true;
                q.push(v);
            }
        }
    }
}

void parallelBfs(int s)
{

    queue<int> q;
    q.push(s);
    visited[s] = true;

    while (!q.empty())
    {

        int u = q.front();
        q.pop();
        cout << u << " ";

#pragma omp parallel for
        for (int i = 0; i < g[u].size(); i++)
        {

            int v = g[u][i];

            if (!visited[v])
            {
                visited[v] = true;
                q.push(v);
            }
        }
    }
}

void dfs(int s)
{

    visited[s] = true;
    cout << s << " ";

    for (int i = 0; i < g[s].size(); i++)
    {
        int u = g[s][i];

        if (!visited[u])
        {
            dfs(u);
        }
    }
}

void parallelDfs(int s)
{

    visited[s] = true;
    cout << s << " ";

#pragma omp parallel for
    for (int i = 0; i < g[s].size(); i++)
    {
        int u = g[s][i];

        if (!visited[u])
        {
            parallelDfs(u);
        }
    }
}

int main()
{

    int n, m, s, choice;

    cout << "Enter the number of vertices: ";
    cin >> n;

    cout << "Enter the number of edges: ";
    cin >> m;

    cout << "Enter the starting vertex of traversal: ";
    cin >> s;

    cout << "Enter the choice: ";
    cin >> choice;

    for (int i = 0; i < m; i++)
    {

        int x, y;
        cout << "Enter the edge " << i + 1 << " ";
        cin >> x >> y;

        g[x].push_back(y);
        g[y].push_back(x);
    }

    if (choice == 1)
    {
        cout << "Parallel Bfs traversal\n";
        auto start_time = chrono::high_resolution_clock::now();
        parallelBfs(s);
        auto end_time = chrono::high_resolution_clock::now();
        auto duration = chrono::duration_cast<chrono::microseconds>(end_time - start_time);

        cout << "\nTime taken: " << duration.count() << " microseconds\n";
    }

    else if (choice == 2)
    {
        cout << "Sequential Bfs traversal\n";
        auto start_time = chrono::high_resolution_clock::now();
        Bfs(s);
        auto end_time = chrono::high_resolution_clock::now();
        auto duration = chrono::duration_cast<chrono::microseconds>(end_time - start_time);

        cout << "\nTime taken: " << duration.count() << " microseconds\n";
    }
    else if (choice == 3)
    {

        cout << "Parallel Dfs traversal\n";
        auto start_time = chrono::high_resolution_clock::now();
        parallelDfs(s);
        auto end_time = chrono::high_resolution_clock::now();
        auto duration = chrono::duration_cast<chrono::microseconds>(end_time - start_time);

        cout << "\nTime taken: " << duration.count() << " microseconds\n";
    }
    else if (choice == 4)
    {

        cout << "Sequential Dfs traversal\n";
        auto start_time = chrono::high_resolution_clock::now();
        dfs(s);
        auto end_time = chrono::high_resolution_clock::now();
        auto duration = chrono::duration_cast<chrono::microseconds>(end_time - start_time);

        cout << "\nTime taken: " << duration.count() << " microseconds\n";
    }
}